<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="clr-namespace:WB.Common">
    <Style x:Key="TitleThreeDepthBlueStyle" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Height" Value="5" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Background" Value="Blue" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="TitleThreeDepthGreenStyle" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Height" Value="5" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Background" Value="GreenYellow" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="TitleThreeDepthWhiteStyle" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Height" Value="5" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="TitleThreeDepthRedStyle" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Height" Value="5" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Background" Value="Red" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="TitleThreeDepthYellowStyle" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="5" />
        <Setter Property="Height" Value="5" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Background" Value="Yellow" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <SolidColorBrush x:Key="DarkGray" Color="#373737" />
    <SolidColorBrush x:Key="SearchAreaDarkBorderBrush" Color="AliceBlue" />
    <SolidColorBrush x:Key="SearchAreaAliceBorderBrush" Color="AliceBlue" />
    <SolidColorBrush x:Key="DarkAreaBorderBrush" Color="#181C55" />
    <SolidColorBrush x:Key="LightAreaBorderBrush" Color="#FFFFFFF5" />
    <SolidColorBrush x:Key="SearchAreaLightBorderBrush" Color="#4C808080" />
    <SolidColorBrush x:Key="LightBrush" Color="#FCECC8" />
    <LinearGradientBrush x:Key="SearchAreaBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="AliceBlue" Offset="0" />
        <GradientStop Color="AntiqueWhite" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="SaveBackground" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="LightYellow" Offset="0" />
        <GradientStop Color="MediumPurple" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="RedBlackLine" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF2B1E1E" Offset="0.865"/>
        <GradientStop Color="#FF8F3232" Offset="0.955"/>
        <GradientStop Color="#FF072355" Offset="0.183"/>
        <GradientStop Color="#FF021E10" Offset="0.395"/>
    </LinearGradientBrush>

    <Style x:Key="CommonButtonSaveStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource LightBrush}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/IMAGE/saveIcon.png" Height="15"/>
                        <TextBlock Foreground="Black" VerticalAlignment="Center" Margin="2,0,0,0" Text="{Binding}" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CommonButtonRefreshStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource LightBrush}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="/IMAGE/refresh.png" Height="Auto"/>
                        <TextBlock Foreground="Black" VerticalAlignment="Center" Margin="2,0,0,0" Text="{Binding}" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BitmapImage x:Key="SaveImage" UriSource="/IMAGE/saveIcon.png"/>

    <HierarchicalDataTemplate x:Key="NodeTemplate">
        <TextBlock x:Name="text" Text="{Binding}"/>
        <HierarchicalDataTemplate.ItemsSource>
            <Binding XPath="child::node()"/>
        </HierarchicalDataTemplate.ItemsSource>
        <HierarchicalDataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=NodeType}" Value="Text">
                <Setter TargetName="text" Property="Text" Value="{Binding Path=Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=NodeType}" Value="Element">
                <Setter TargetName="text" Property="Text" Value="{Binding Path=Name}"/>
            </DataTrigger>
        </HierarchicalDataTemplate.Triggers>
    </HierarchicalDataTemplate>
    <HierarchicalDataTemplate x:Key="NodeTemplate2" DataType="ArrayOfFavQuery" ItemsSource="{Binding XPath=TreeQuery}">
        <TextBlock Text="{Binding XPath=FolderInfo}"/>
    </HierarchicalDataTemplate>
    <XmlDataProvider x:Key="xmlDataProvider">

    </XmlDataProvider>
    <!--HoGridSplitter-->
    <Style x:Key="HoGridSplitter"  TargetType="{x:Type GridSplitter}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="ShowsPreview" Value="True"/>
        <Setter Property="Background" Value="Gray"/>
        <Setter Property="Height" Value="4"/>
    </Style>
    <!--VerGridSplitter-->
    <Style x:Key="VerGridSplitter"  TargetType="{x:Type GridSplitter}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="ShowsPreview" Value="True"/>
        <Setter Property="Background" Value="Gray"/>
        <Setter Property="Width" Value="4"/>
    </Style>
    <!--SearchButton-->
    <Style x:Key="SearchButton"  TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5,0,0,0"></Setter>
        <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}"/>
        <Setter Property="Width" Value="100"/>
    </Style>
    <!--DefaultDataGrid-->
    <Style x:Key="DefaultDataGrid"  TargetType="{x:Type DataGrid}">
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource SearchAreaAliceBorderBrush}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{StaticResource SearchAreaAliceBorderBrush}"/>
        <Setter Property="CanUserAddRows" Value="False"/>
    </Style>
    <!--DefaultRadioButton-->
    <Style x:Key="DefaultRadioButton"  TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5,0,0,0"></Setter>
    </Style>
    <!--DefaultTextBlock-->
    <Style x:Key="DefaultTextBlock"  TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="5,0,0,0"></Setter>
    </Style>
    <!--Default TextBox2-->
    <Style x:Key="DefaultTextBoxV2"  TargetType="{x:Type TextBox}">
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="Margin" Value="5,0,5,0"/>
        <Setter Property="FontFamily" Value="Courier New"/>
        <Setter Property="b:TextBoxBehavior.SelectAllTextOnFocus" Value="True"/>
        <Setter Property="InputMethod.PreferredImeState" Value="On"/>
        <Setter Property="InputMethod.PreferredImeConversionMode" Value="Native"/>
    </Style>
    <!--DefaultTextBox TextBox Styles (S)-->
    <Style x:Key="DefaultTextBox"  TargetType="{x:Type TextBox}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Margin" Value="5,0,5,0"></Setter>
        <Setter Property="Padding" Value="5,0,5,0"></Setter>
        <Setter Property="FontFamily" Value="Courier New"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="b:TextBoxBehavior.SelectAllTextOnFocus" Value="True"/>
        <Setter Property="InputMethod.PreferredImeState" Value="On"/>
        <Setter Property="InputMethod.PreferredImeConversionMode" Value="Native"/>
    </Style>
    <!--DefaultTextBox TextBox Styles (E)-->
    <!--WatermarkTextBox TextBox Styles (E)-->
    <Style x:Key="WatermarkTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="BorderBase" Background="White" BorderThickness="1,1,1,1" BorderBrush="Silver" Margin="0,5,0,5">
                            <Label x:Name="TextPrompt"
                                Content="{Binding RelativeSource={RelativeSource  Mode=TemplatedParent}, Path=Tag}" 
                                Background="{TemplateBinding Background}" Visibility="Collapsed" VerticalContentAlignment="Center"
                                Focusable="False" Foreground="Silver"/>
                        </Border>
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" Foreground="Black"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="TextPrompt" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="BorderBase" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--WatermarkTextBox TextBox Styles (E)-->
    <Style x:Key="WatermarkTextBox2" TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="BorderBase" Background="White" BorderThickness="1,1,1,1" BorderBrush="Silver" Margin="0,0,0,0">
                            <TextBlock x:Name="TextPrompt"
                                Text="{Binding RelativeSource={RelativeSource  Mode=TemplatedParent}, Path=Tag}" 
                                Background="{TemplateBinding Background}" Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center"
                                Foreground="Gray"/>
                        </Border>
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" Foreground="Black"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="TextPrompt" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="BorderBase" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--WatermarkTextBox TextBox Styles (E)-->
    <Style x:Key="tabHeaderStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Panel">
                        <Border BorderBrush="Beige" BorderThickness="4,0,0,0" x:Name="brSel" Visibility="Collapsed"/>
                        <Border BorderBrush="#181C55" BorderThickness="2,0,0,0" x:Name="brSel2" Visibility="Collapsed"/>
                        <TextBlock x:Name="tabHeader" Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Header}" VerticalAlignment="Center" HorizontalAlignment="Center"
                                   FontSize="14" Foreground="Black" Margin="10,0,10,0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Panel" Property="Background" Value="#181C55" />
                            <Setter TargetName="tabHeader" Property="Foreground" Value="White"/>
                            <Setter TargetName="brSel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="brSel2" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Panel" Property="Background" Value="White" />
                            <Setter TargetName="tabHeader" Property="Foreground" Value="#181C55"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="styleCalendar" TargetType="{x:Type Calendar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <!-- Wrapping in ViewBox will enlarge calendar of that  size.-->
                    <Viewbox Height="Auto"
                         Width="Auto">
                        <CalendarItem x:Name="PART_CalendarItem"
                                  Background="{TemplateBinding Background}"
                                  BorderBrush="{TemplateBinding BorderBrush}"
                                  BorderThickness="{TemplateBinding  BorderThickness}"/>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="styCalendarDay" TargetType="{x:Type CalendarDayButton}">

    </Style>
    <Style x:Key="groupStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True">
                        <Expander.Header>
                            <DockPanel >
                                <TextBlock Text="{Binding Path=Name}" />
                            </DockPanel>
                        </Expander.Header>
                        <Expander.Content>
                            <ItemsPresenter />
                        </Expander.Content>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="groupStyleBlue" TargetType="{x:Type GroupItem}">
        <Setter Property="Margin" Value="0,0,0,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True" Background="#FF112255" BorderBrush="#FF002255" Foreground="#FFEEEEEE" BorderThickness="1,1,1,5">
                        <Expander.Header>
                            <DockPanel>
                                <TextBlock FontWeight="Bold" Text="{Binding Path=Name}" Margin="5,0,0,0" Width="100"/>
                                <TextBlock FontWeight="Bold" Text="{Binding Path=ItemCount}"/>
                            </DockPanel>
                        </Expander.Header>
                        <Expander.Content>
                            <ItemsPresenter />
                        </Expander.Content>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Color x:Key="DisableDay1">Black</Color>
    <Color x:Key="DisableDay2">Black</Color>

    <Color x:Key="NormalDay1">LightGray</Color>
    <Color x:Key="NormalDay2">Gray</Color>

    <Color x:Key="SelectedDay1">White</Color>
    <Color x:Key="SelectedDay2">White</Color>
    <Style x:Key="CalendarDayButtonStyle" TargetType="{x:Type CalendarDayButton}">
        <!--<Setter Property="Background" Value="#FFBADDE9" />-->

        <Setter Property="FontSize" Value="11" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To=".5" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Background" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="Opacity" To=".35" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To=".75" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CalendarButtonFocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="CalendarButtonFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="CalendarButtonUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility" Duration="0">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Color)" To="{DynamicResource DisableDay1}" Duration="0" />
                                        <ColorAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[3].(GradientStop.Color)" To="{DynamicResource DisableDay2}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay"  />
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TodayBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[1].(GradientStop.Offset)" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="Content" Storyboard.TargetProperty="(ContentControl.Foreground).(GradientBrush.GradientStops)[2].(GradientStop.Offset)" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BlackoutDayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="NormalDay" />
                                <VisualState x:Name="BlackoutDay">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="BlackoutVisual" Storyboard.TargetProperty="Opacity" To=".2" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Rectangle x:Name="TodayBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="#FFAAAAAA" />
                        <Rectangle x:Name="SelectedBackground" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />
                        <Rectangle x:Name="Background" RadiusX="1" RadiusY="1" Opacity="0" Fill="{TemplateBinding Background}" />

                        <ContentControl x:Name="Content" IsTabStop="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{TemplateBinding FontSize}" Margin="5,1,5,1">
                            <ContentControl.Foreground>
                                <LinearGradientBrush>
                                    <GradientStop Offset="0" Color="{DynamicResource SelectedDay1}" />
                                    <GradientStop Offset="0" Color="{DynamicResource SelectedDay2}" />
                                    <GradientStop Offset="0" Color="{DynamicResource NormalDay1}" />
                                    <GradientStop Offset="1" Color="{DynamicResource NormalDay2}" />
                                </LinearGradientBrush>
                            </ContentControl.Foreground>
                        </ContentControl>

                        <Path x:Name="BlackoutVisual" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RenderTransformOrigin="0.5,0.5" Fill="#FF000000" Stretch="Fill" Data="M8.1772461,11.029181 L10.433105,11.029181 L11.700684,12.801641 L12.973633,11.029181 L15.191895,11.029181 L12.844727,13.999395 L15.21875,17.060919 L12.962891,17.060919 L11.673828,15.256231 L10.352539,17.060919 L8.1396484,17.060919 L10.519043,14.042364 z" />
                        <Rectangle x:Name="FocusVisual" Visibility="Collapsed" IsHitTestVisible="false" RadiusX="1" RadiusY="1" Stroke="#FF6DBDD1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="toggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <TextBlock Name="Text" Text="{TemplateBinding Content}" HorizontalAlignment="Center" />
                        <Image Name="Image" Grid.Row="1" Source="\IMAGE\refresh.png" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Text" Property="Text" Value="{TemplateBinding Content}"/>
                            <Setter TargetName="Image" Property="Source" Value="\IMAGE\refresh.png" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnGolden" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#373737" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}">
                        <Grid>
                            <!--<Path x:Name="PathIcon" Width="15" Height="25" Stretch="Fill" Fill="#4C87B3" HorizontalAlignment="Left" Margin="17,0,0,0" Data="F1 M 30.0833,22.1667L 50.6665,37.6043L 50.6665,38.7918L 30.0833,53.8333L 30.0833,22.1667 Z "/>-->
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FFC9C92C" />
                            <Setter Property="Foreground" Value="White" />
                            <!--<Setter TargetName="PathIcon" Property="Fill" Value="Black" />-->
                        </Trigger>

                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="OrangeRed" />
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnPLEdit" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#373737" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}">
                        <Grid>
                            <!--<Path x:Name="PathIcon" Width="15" Height="25" Stretch="Fill" Fill="#4C87B3" HorizontalAlignment="Left" Margin="17,0,0,0" Data="F1 M 30.0833,22.1667L 50.6665,37.6043L 50.6665,38.7918L 30.0833,53.8333L 30.0833,22.1667 Z "/>-->
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF6FF16F" />
                            <Setter Property="Foreground" Value="White" />
                            <!--<Setter TargetName="PathIcon" Property="Fill" Value="Black" />-->
                        </Trigger>

                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="OrangeRed" />
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnDefault" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#373737" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}">
                        <Grid>
                            <!--<Path x:Name="PathIcon" Width="15" Height="25" Stretch="Fill" Fill="#4C87B3" HorizontalAlignment="Left" Margin="17,0,0,0" Data="F1 M 30.0833,22.1667L 50.6665,37.6043L 50.6665,38.7918L 30.0833,53.8333L 30.0833,22.1667 Z "/>-->
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF1AAEBD" />
                            <Setter Property="Foreground" Value="White" />
                            <!--<Setter TargetName="PathIcon" Property="Fill" Value="Black" />-->
                        </Trigger>

                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="OrangeRed" />
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="btnSave" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource LightBrush}" />
        <Setter Property="Foreground" Value="#373737" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}" BorderBrush="#373737" BorderThickness="1">
                        <StackPanel Orientation="Horizontal">
                            <Image Source="/IMAGE/saveIcon.png" Height="15" Margin="2,0,0,0"/>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF1AAEBD" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="btnRefresh" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource LightBrush}" />
        <Setter Property="Foreground" Value="#373737" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}" BorderBrush="#373737" BorderThickness="1" >
                        <StackPanel Orientation="Horizontal">
                            <Image Source="/IMAGE/refresh.png" Height="Auto"/>
                            <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                        </StackPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FF1AAEBD" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LeftScrollViewer"
       TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Column="1"
                  BorderThickness="0,1,1,1">
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />
                            </Border.BorderBrush>
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" />
                        </Border>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                     Value="{TemplateBinding VerticalOffset}"
                     Maximum="{TemplateBinding ScrollableHeight}"
                     ViewportSize="{TemplateBinding ViewportHeight}"
                     Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                     Orientation="Horizontal"
                     Grid.Row="1"
                     Grid.Column="1"
                     Value="{TemplateBinding HorizontalOffset}"
                     Maximum="{TemplateBinding ScrollableWidth}"
                     ViewportSize="{TemplateBinding ViewportWidth}"
                     Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>